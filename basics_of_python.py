# -*- coding: utf-8 -*-
"""BASICS OF PYTHON

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pIA9l6J8YfBtcRJHKQWTMUBH_5YWXi0k

Q1. L is a list defined as L= [11, 12, 13, 14].
(i) WAP to add 50 and 60 to L.
(ii) WAP to remove 11 and 13from L.
(iii) WAP to sort L in ascending order.
(iv) WAP to sort L in descending order.
(v) WAP to search for 13 in L.
(vi) WAP to count the number of elements present in L.
(vii) WAP to sum all the elements in L.
(viii) WAP to sum all ODD numbers in L.
(ix) WAP to sum all EVEN numbers in L.
(x) WAP to sum all PRIME numbers in L.
(xi) WAP to clear all the elements in L.
(xii) WAP to delete L.
"""

L = [11, 12, 13, 14]

# (i) Add 50 and 60 to L
L.extend([50, 60])
print("After adding 50 and 60:", L)

# (ii) Remove 11 and 13 from L
L.remove(11)
L.remove(13)
print("After removing 11 and 13:", L)

# (iii) Sort L in ascending order
L.sort()
print("Sorted in ascending order:", L)

# (iv) Sort L in descending order
L.sort(reverse=True)
print("Sorted in descending order:", L)

# (v) Search for 13 in L
print("Is 13 in L?", 13 in L)

# (vi) Count number of elements
print("Number of elements:", len(L))

# (vii) Sum all elements
print("Sum of all elements:", sum(L))

# (viii) Sum all ODD numbers
odd_sum = sum(x for x in L if x % 2 != 0)
print("Sum of odd numbers:", odd_sum)

# (ix) Sum all EVEN numbers
even_sum = sum(x for x in L if x % 2 == 0)
print("Sum of even numbers:", even_sum)

# (x) Sum all PRIME numbers
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

prime_sum = sum(x for x in L if is_prime(x))
print("Sum of prime numbers:", prime_sum)

# (xi) Clear all elements
L.clear()
print("After clearing:", L)

# (xii) Delete L
del L
# print(L)  # This will raise NameError as L is deleted

"""Q2. D is a dictionary defined as D= {1:5.6, 2:7.8, 3:6.6, 4:8.7, 5:7.7}.
(i) WAP to add new entry in D; key=8 and value is 8.8
(ii) WAP to remove key=2.
(iii) WAP to check weather 6 key is present in D.
(iv) WAP to count the number of elements present in D.
(v) WAP to add all the values present D.
(vi) WAP to update the value of 3 to 7.1.
(vii) WAP to clear the dictionary.
"""

D = {1:5.6, 2:7.8, 3:6.6, 4:8.7, 5:7.7}

# (i) Add new entry key=8, value=8.8
D[8] = 8.8
print("After adding 8:8.8:", D)

# (ii) Remove key=2
del D[2]
print("After removing key 2:", D)

# (iii) Check if key 6 is present
print("Is key 6 present?", 6 in D)

# (iv) Count number of elements
print("Number of elements:", len(D))

# (v) Sum all values
print("Sum of all values:", sum(D.values()))

# (vi) Update value of key 3 to 7.1
D[3] = 7.1
print("After updating key 3:", D)

# (vii) Clear the dictionary
D.clear()
print("After clearing:", D)

"""Q3. S1 is a set defined as S1= [10, 20, 30, 40, 50, 60].
 S2 is a set defined as S2= [40, 50, 60, 70, 80, 90].
(i) WAP to add 55 and 66 in Set S1.
(ii) WAP to remove 10 and 30 from Set S1.
(iii) WAP to check whether 40 is present in S1.
(iv) WAP to find the union between S1 and S2.
(v) WAP to find the intersection between S1 and S2.
(vi) WAP to find the S1 - S2
"""

S1 = {10, 20, 30, 40, 50, 60}
S2 = {40, 50, 60, 70, 80, 90}

# (i) Add 55 and 66 to S1
S1.add(55)
S1.add(66)
print("After adding 55 and 66 to S1:", S1)

# (ii) Remove 10 and 30 from S1
S1.discard(10)
S1.discard(30)
print("After removing 10 and 30 from S1:", S1)

# (iii) Check if 40 is present in S1
print("Is 40 in S1?", 40 in S1)

# (iv) Union of S1 and S2
print("Union of S1 and S2:", S1.union(S2))

# (v) Intersection of S1 and S2
print("Intersection of S1 and S2:", S1.intersection(S2))

# (vi) S1 - S2
print("S1 - S2:", S1.difference(S2))

"""Q4. Write the following program.
(i) WAP to print 100 random strings whose length between 6 and 8.
(ii) WAP to print all prime numbers between 600 and 800.
(iii) WAP to print all numbers between 100 and 1000 that are divisible by 7 and 9
"""

import random
import string

# (i) Print 100 random strings (length 6-8)
def random_string():
    length = random.randint(6, 8)
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))

print("100 random strings:")
for _ in range(100):
    print(random_string())

# (ii) Print all prime numbers between 600 and 800
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

print("\nPrime numbers between 600 and 800:")
for num in range(600, 801):
    if is_prime(num):
        print(num, end=" ")

# (iii) Print numbers between 100 and 1000 divisible by 7 and 9
print("\n\nNumbers between 100 and 1000 divisible by 7 and 9:")
for num in range(100, 1001):
    if num % 7 == 0 and num % 9 == 0:
        print(num, end=" ")

"""Q5. WAP to create two lists of 10 random numbers between 10 and 30; Find
(i) Common numbers in the two lists
(ii) Unique numbers in both the list
(iii) Minimum in both the list
(iv) Maximum in both the list
(v) Sum of both the lists
"""

import random

# Create two lists of 10 random numbers between 10 and 30
list1 = [random.randint(10, 30) for _ in range(10)]
list2 = [random.randint(10, 30) for _ in range(10)]

print("List 1:", list1)
print("List 2:", list2)

# (i) Common numbers
common = set(list1) & set(list2)
print("\nCommon numbers:", common)

# (ii) Unique numbers in both lists
unique = set(list1) ^ set(list2)
print("Unique numbers in both lists:", unique)

# (iii) Minimum in both lists
print("Min in list1:", min(list1), "Min in list2:", min(list2))

# (iv) Maximum in both lists
print("Max in list1:", max(list1), "Max in list2:", max(list2))

# (v) Sum of both lists
print("Sum of list1:", sum(list1), "Sum of list2:", sum(list2))

"""Q6. WAP to create a list of 100 random numbers between 100 and 900. Count and print the:
(i) All odd numbers
(ii) All even numbers
(iii) All prime numbers
"""

import random

# Create list of 100 random numbers between 100 and 900
numbers = [random.randint(100, 900) for _ in range(100)]

# (i) All odd numbers
odd_numbers = [x for x in numbers if x % 2 != 0]
print("Odd numbers:", odd_numbers)
print("Count of odd numbers:", len(odd_numbers))

# (ii) All even numbers
even_numbers = [x for x in numbers if x % 2 == 0]
print("\nEven numbers:", even_numbers)
print("Count of even numbers:", len(even_numbers))

# (iii) All prime numbers
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

prime_numbers = [x for x in numbers if is_prime(x)]
print("\nPrime numbers:", prime_numbers)
print("Count of prime numbers:", len(prime_numbers))

"""Q7. D is a dictionary defined as D={1:"One",2:"Two",3:"Three",4:"Four", 5:"Five"}.
 WAP to read all the keys and values from dictionary and write to the file in the given below format.
Key1, Value1
Key2, Value2
Key3, Value3
"""

D = {1:"One", 2:"Two", 3:"Three", 4:"Four", 5:"Five"}

with open("dictionary_output.txt", "w") as file:
    for key, value in D.items():
        file.write(f"{key}, {value}\n")

print("Dictionary written to file successfully.")

"""Q8. L is a list defined as L={"One","Two","Three","Four","Five"}.
 WAP to count the length of reach element from a list and write to the file in the given below format:
One, 3
Two, 3
Four, 4
"""

L = ["One", "Two", "Three", "Four", "Five"]

with open("list_lengths.txt", "w") as file:
    for item in L:
        file.write(f"{item}, {len(item)}\n")

print("List element lengths written to file successfully.")

"""Q9. Write to the file 100 random strings whose length between 10 and 15."""

import random
import string

def random_string():
    length = random.randint(10, 15)
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))

with open("random_strings.txt", "w") as file:
    for _ in range(100):
        file.write(random_string() + "\n")

print("100 random strings written to file successfully.")

"""Q10. Write to the file all prime numbers between 600 and 800."""

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

with open("primes_600_800.txt", "w") as file:
    for num in range(600, 801):
        if is_prime(num):
            file.write(f"{num}\n")

print("Prime numbers between 600 and 800 written to file successfully.")

"""Q11. WAP to calculate the time taken by a program."""

import time

start_time = time.time()

# Your program code here
# For example:
total = 0
for i in range(1, 1000001):
    total += i

end_time = time.time()
execution_time = end_time - start_time

print(f"Program executed in {execution_time:.4f} seconds")

"""Q12. WAP to sort following number of elements in a list, calculate time taken and plot the graph.
Number of elements in list Time Taken
5k T1
10k T2
15k T3
20k T4
25k T5
"""

import time
import random
import matplotlib.pyplot as plt

sizes = [5000, 10000, 15000, 20000, 25000]
times = []

for size in sizes:
    data = [random.randint(1, 100000) for _ in range(size)]

    start_time = time.time()
    data.sort()
    end_time = time.time()

    elapsed = end_time - start_time
    times.append(elapsed)
    print(f"Sorted {size} elements in {elapsed:.4f} seconds")

# Plotting the graph
plt.plot(sizes, times, marker='o')
plt.title('Sorting Time Analysis')
plt.xlabel('Number of Elements')
plt.ylabel('Time Taken (seconds)')
plt.grid(True)
plt.show()

"""Q13. WAP to create a dictionary of student marks in five subjects and you have to find the student
 having maximum and minimum average marks.
"""

students = {
    "Alice": [85, 90, 78, 92, 88],
    "Bob": [76, 82, 79, 81, 84],
    "Charlie": [92, 95, 88, 90, 94],
    "Diana": [78, 82, 80, 85, 79],
    "Eve": [88, 92, 85, 90, 87]
}

# Calculate averages
averages = {name: sum(marks)/len(marks) for name, marks in students.items()}

# Find max and min averages
max_student = max(averages.items(), key=lambda x: x[1])
min_student = min(averages.items(), key=lambda x: x[1])

print(f"Student with maximum average: {max_student[0]} ({max_student[1]:.2f})")
print(f"Student with minimum average: {min_student[0]} ({min_student[1]:.2f})")